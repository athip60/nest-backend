// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  schemas  = ["user_management"]
}

model User {
  id              Int            @id @default(autoincrement())
  username        String            @unique @map("username") @db.VarChar(255)
  password        String            @map("password") @db.VarChar(255)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  isDelete        Boolean           @default(false) @map("is_delete")
  userPictures    UserPictures?
  userPicturesLog UserPicturesLog[]

  @@map("user")
  @@schema("user_management")
}

model Pictures {
  id              BigInt            @id @default(autoincrement())
  path            String            @map("path") @db.VarChar(10)
  key             String            @map("key")
  type            String            @map("type") @db.VarChar(5)
  createdAt       DateTime          @default(now()) @map("created_at")
  userPictures    UserPictures?
  userPicturesLog UserPicturesLog[]

  @@map("pictures")
  @@schema("user_management")
}

model UserPictures {
  id        BigInt   @id @default(autoincrement())
  userId    Int   @unique @map("user_id")
  pictureId BigInt   @unique @map("picture_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id])
  picture Pictures @relation(fields: [pictureId], references: [id])

  @@unique([userId, pictureId])
  @@map("user_pictures")
  @@schema("user_management")
}

model UserPicturesLog {
  id        BigInt   @id @default(autoincrement())
  userId    Int   @map("user_id")
  pictureId BigInt   @map("picture_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id])
  picture Pictures @relation(fields: [pictureId], references: [id])

  @@map("user_pictures_log")
  @@schema("user_management")
}

model ErrorLog {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime
  errorMessage String   @map("error_message")
  stackTrace   String?  @map("stack_trace") @db.Text
  errorCode    String?  @map("error_code") @db.VarChar(50)
  userId       Int?     @map("user_id")
  url          String?  @map("url") @db.VarChar(255)
  method       String?  @map("method") @db.VarChar(10)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("error_logs")
  @@schema("user_management")
}
